diff --git a/app/Controllers/AdminController.php b/app/Controllers/AdminController.php
index a5a4451..48ca0a5 100644
--- a/app/Controllers/AdminController.php
+++ b/app/Controllers/AdminController.php
@@ -22,37 +22,17 @@ class AdminController extends Controller
         if ($this->checkAuth()['isLogged'] === true && $this->checkAuth()['isAdmin'] === true) {
 
             // Pagination
-            if (isset($_GET['p']) && !empty($_GET['p'])) {
-                $currentPage = (int) strip_tags($_GET['p']);
-            } else {
-                $currentPage = 1;
-            }
-            // Count all invalid comments
             $countComments = $this->comments->countAllInvalid();
             $nbComments = (int) $countComments->nb_comments_invalid;
-            // Comments per page
-            $perPage = 10;
-            // Total page calcul
-            $totalPages = intval(ceil($nbComments / $perPage));
-            // Check current page
-            if ($currentPage > $totalPages || $currentPage < 1) {
-                $currentPage = 1;
-            }
-            if ($currentPage === $totalPages) {
-                $lastPage = true;
-            } else {
-                $lastPage = false;
-            }
-            // Limit calcul
-            $limitFirst = ($currentPage * $perPage) - $perPage;
+            $pages = $this->pagination->pagination($nbComments, 10);
 
             // Get data of all invalid comments
-            $comments = $this->comments->findAllInvalid($limitFirst, $perPage);
+            $comments = $this->comments->findAllInvalid($pages[0]['limitFirst'], $pages[0]['perPage']);
 
             // Render
             $this->view('pages/admin/comments.html.twig', [
-                'lastPage' => $lastPage,
-                'currentPage' => $currentPage,
+                'lastPage' => $pages[0]['lastPage'],
+                'currentPage' => $pages[0]['currentPage'],
                 'comments' => $comments
             ]);
         
@@ -64,10 +44,11 @@ class AdminController extends Controller
 
     public function indexUsers()
     {
-        // Check if user is logged in and if he is admin
+        // Check if user is logged and if he is admin
         if ($this->checkAuth()['isLogged'] === true && $this->checkAuth()['isAdmin'] === true) {
 
             // Pagination
+<<<<<<< HEAD
             if (isset($_GET['p']) && !empty($_GET['p'])) {
                 $currentPage = (int) strip_tags($_GET['p']);
             } else {
@@ -91,14 +72,19 @@ class AdminController extends Controller
             }
             // Limit calcul
             $limitFirst = ($currentPage * $perPage) - $perPage;
+=======
+            $countComments = $this->users->countAllUsers();
+            $nbComments = (int) $countComments->nb_users;
+            $pages = $this->pagination->pagination($nbComments, 10);
+>>>>>>> Optimization
 
             // Get data of all invalid comments
-            $users = $this->users->findAll($limitFirst, $perPage);
+            $users = $this->users->findAll($pages[0]['limitFirst'], $pages[0]['perPage']);
 
             // Render
             $this->view('pages/admin/users.html.twig', [
-                'lastPage' => $lastPage,
-                'currentPage' => $currentPage,
+                'lastPage' => $pages[0]['lastPage'],
+                'currentPage' => $pages[0]['currentPage'],
                 'users' => $users
             ]);
         
diff --git a/app/Controllers/ArticlesController.php b/app/Controllers/ArticlesController.php
index e7ce382..116a6a2 100644
--- a/app/Controllers/ArticlesController.php
+++ b/app/Controllers/ArticlesController.php
@@ -7,6 +7,7 @@ class ArticlesController extends Controller
     public function index(): void
     {
         // Pagination
+<<<<<<< HEAD
         if (isset($_GET['p']) && !empty($_GET['p'])) {
             $currentPage = (int) strip_tags($_GET['p']);
         } else {
@@ -38,26 +39,41 @@ class ArticlesController extends Controller
         $this->view('pages/articles/index.html.twig', [
             'lastPage' => $lastPage,
             'currentPage' => $currentPage,
+=======
+        $countArticles = $this->articles->countAll('articles');
+        $nbArticles = (int) $countArticles->nb_articles;
+        $pages = $this->pagination->pagination($nbArticles, 6);
+
+        // Get data of all articles
+        $data = $this->articles->findAll($pages[0]['limitFirst'], $pages[0]['perPage']);
+
+        // Render
+        $this->view('pages/articles/index.html.twig', [
+            'lastPage' => $pages[0]['lastPage'],
+            'currentPage' => $pages[0]['currentPage'],
+>>>>>>> Optimization
             'articles' => $data
         ]);
     }
 
     public function show(): void
     {
-        $checkAuth = false;
-        $checkCommentSent = false;
 
+        $checkCommentSent = false;
         if (isset($_GET['commentSent'])) {
             $checkCommentSent = true;
         }
 
-       
-
         // Get data of current article
         $data = $this->articles->find($this->params['id']);
 
+        // Pagination
+        $countComments = $this->comments->countAllValidFromArticle($this->params['id']);
+        $nbComments = (int) $countComments->nb_comments;
+        $pages = $this->pagination->pagination($nbComments, 3);
+
         // Get validate comments of current article
-        $comments = $this->comments->findAllValid($this->params['id']);
+        $comments = $this->comments->findAllValid($this->params['id'], $pages[0]['limitFirst'], $pages[0]['perPage']);
 
         // Check if user is logged in
         $checkAuth = false;
@@ -83,7 +99,9 @@ class ArticlesController extends Controller
             'checkAuth' => $checkAuth,
             'articlePermission' => $articlePermission,
             'checkAdmin' => $checkAdmin,
-            'checkCommentSent' => $checkCommentSent
+            'checkCommentSent' => $checkCommentSent,
+            'lastPage' => $pages[0]['lastPage'],
+            'currentPage' => $pages[0]['currentPage'],
         ]);
     }
 
@@ -119,7 +137,7 @@ class ArticlesController extends Controller
                 }
 
                 // Check if title already exists
-                $checkTitle = $this->articles->checkExists('title', $_POST['title']);
+                $checkTitle = $this->articles->checkExists('articles', 'title', $_POST['title']);
                 if ($checkTitle === false) {
 
                     // Add data of article in array
@@ -139,7 +157,7 @@ class ArticlesController extends Controller
                     if ($errors === null) {
                         // Creation of article and redirection
                         $hydratedData = $this->articles->hydrate($data);
-                        $this->articles->create($hydratedData); 
+                        $this->articles->create('articles', $hydratedData); 
                         header('Location: ' . '/articles'); 
                     }
 
@@ -184,7 +202,7 @@ class ArticlesController extends Controller
             if (isset($_POST) && !empty($_POST)) {
 
                 // Checks if title exist and title is not equal to this title
-                $checkTitle = $this->articles->checkExists('title', $_POST['title']);
+                $checkTitle = $this->articles->checkExists('articles', 'title', $_POST['title']);
                 if ($checkTitle === false || $_POST['title'] === $data[0]->getTitle()) {
 
                     // Check form data
@@ -205,7 +223,7 @@ class ArticlesController extends Controller
                                     ->setCaption($_POST['caption'])
                                     ->setAuthor_id($_POST['author'])
                                     ->setUpdated_at($this->date->getDateNow())
-                                    ->update($this->params['id']);
+                                    ->update('articles', $this->params['id']);
                         header('Location: /article/' . $this->articles->getSlug() . '/' . $this->articles->getId()); 
                     }
 
@@ -242,15 +260,15 @@ class ArticlesController extends Controller
             }
 
             // Delete comments associated with article
-            $comments = $this->comments->findAllBy('article_id', $this->params['id']);
+            $comments = $this->comments->findAllBy('comments', 'article_id', $this->params['id']);
             if (!empty($comments)) {
                 foreach ($comments as $comment) {
-                    $this->comments->delete($comment->id);
+                    $this->comments->delete('comments', $comment->id);
                 }
             }
             
             // Delete article and redirection
-            $this->articles->delete($this->params['id']);
+            $this->articles->delete('articles', $this->params['id']);
             header('Location: /articles');
                   
         } else {
diff --git a/app/Controllers/CommentsController.php b/app/Controllers/CommentsController.php
index eb0dc0d..9cd2ab2 100644
--- a/app/Controllers/CommentsController.php
+++ b/app/Controllers/CommentsController.php
@@ -23,7 +23,7 @@ class CommentsController extends Controller
 
                 // Creation of article and redirection
                 $hydratedData = $this->comments->hydrate($data);
-                $this->comments->create($hydratedData); 
+                $this->comments->create('comments', $hydratedData); 
                 $commentSent = true;
                 header('Location: /article/' . $this->params['slug'] . '/' . $this->params['id'] . '?commentSent=' . $commentSent);
                 
@@ -55,7 +55,7 @@ class CommentsController extends Controller
         if ($this->checkAuth()['isLogged'] === true && $this->checkAuth()['isAdmin'] === true) {
 
             // Delete comment and redirection
-            $this->comments->delete($this->params['id']);
+            $this->comments->delete('comments', $this->params['id']);
             header('Location: /administration/commentaires');
             
         }   else {
diff --git a/app/Controllers/Controller.php b/app/Controllers/Controller.php
index 8dd0905..8903ed8 100644
--- a/app/Controllers/Controller.php
+++ b/app/Controllers/Controller.php
@@ -4,10 +4,11 @@ namespace App\Controllers;
 use App\Helpers\Date;
 use App\Helpers\ErrorsHandling;
 use App\Helpers\FormValidator;
+use App\Helpers\Pagination;
 use App\Helpers\Text;
-use App\Models\ArticlesModel;
-use App\Models\CommentsModel;
-use App\Models\UsersModel;
+use App\Models\Articles\ArticlesModel;
+use App\Models\Comments\CommentsModel;
+use App\Models\Users\UsersModel;
 use Twig\Environment;
 use Twig\Loader\FilesystemLoader;
 
@@ -32,6 +33,8 @@ class Controller
 
     protected Date $date;
 
+    protected Pagination $pagination;
+
     protected array $params;
 
     public function __construct()
@@ -39,7 +42,7 @@ class Controller
         // Twig
         $this->loader = new FilesystemLoader(ROOT . '/app/Views');
         $this->twig = new Environment($this->loader, [
-            'cache' => false // ROOT . '/tmp/cache',
+            'cache' => false // ROOT . '/tmp/cache'
         ]);
 
         // Models
@@ -47,11 +50,12 @@ class Controller
         $this->comments = new CommentsModel;
         $this->users = new UsersModel;
 
-        // Helpers class
+        // Helpers
         $this->formValidator = new FormValidator;
         $this->errorsHandling = new ErrorsHandling;
         $this->text = new Text;
         $this->date = new Date;
+        $this->pagination = new Pagination;
     }
 
     public function checkAuth(): array
diff --git a/app/Controllers/MainController.php b/app/Controllers/MainController.php
index 6536365..887399c 100644
--- a/app/Controllers/MainController.php
+++ b/app/Controllers/MainController.php
@@ -7,7 +7,7 @@ class MainController extends Controller
     public function home(): void
     {
         // Get data of all articles with limit
-        $data = $this->articles->findAll(3);
+        $data = $this->articles->findAll(3, 3);
 
         // Render
         $this->view('pages/global/home.html.twig', ['articles' => $data]);
diff --git a/app/Controllers/UsersController.php b/app/Controllers/UsersController.php
index 240c5de..1078f10 100644
--- a/app/Controllers/UsersController.php
+++ b/app/Controllers/UsersController.php
@@ -12,7 +12,7 @@ class UsersController extends Controller
         if (isset($_POST) && !empty($_POST)) {
 
             // Check if email already exists
-            $checkEmail = $this->users->checkExists('email', $_POST['email']);
+            $checkEmail = $this->users->checkExists('users', 'email', $_POST['email']);
             if ($checkEmail === false) {
                 
                 // Check if password and password-confirm match
@@ -35,7 +35,7 @@ class UsersController extends Controller
                         $data['password'] = password_hash($_POST['password'], PASSWORD_DEFAULT);
                         // Creation of user and redirection
                         $hydratedData = $this->users->hydrate($data);
-                        $this->users->create($hydratedData); 
+                        $this->users->create('users', $hydratedData); 
                         header('Location: ' . '/'); 
                     }
 
@@ -99,30 +99,30 @@ class UsersController extends Controller
         if ($this->checkAuth()['isLogged'] === true && $this->checkAuth()['isAdmin'] === true) {
 
             // Delete comment if user is author
-            $comments = $this->comments->findAllBy('author_id', $this->params['id']);
+            $comments = $this->comments->findAllBy('comments', 'author_id', $this->params['id']);
             if (!empty($comments)) {
                 foreach ($comments as $comment) {
-                    $this->comments->delete($comment->id);
+                    $this->comments->delete('comments', $comment->id);
                 }
             }
 
             // Delete article if user is author
-            $articles = $this->articles->findAllBy('author_id', $this->params['id']);
+            $articles = $this->articles->findAllBy('articles', 'author_id', $this->params['id']);
             if (!empty($articles)) {
                 foreach ($articles as $article) {
-                    $articleComments = $this->comments->findAllBy('article_id', $article->id);
+                    $articleComments = $this->comments->findAllBy('comments', 'article_id', $article->id);
                     if (!empty($articleComments)) {
                         foreach ($articleComments as $comment) {
-                            $this->comments->delete($comment->id);
+                            $this->comments->delete('comments', $comment->id);
                         }
                     }
 
-                    $this->articles->delete($article->id);
+                    $this->articles->delete('articles', $article->id);
                 }
             }
             
             // Delete user and redirection
-            $this->users->delete($this->params['id']);
+            $this->users->delete('users', $this->params['id']);
             header('Location: /administration/utilisateurs');
             
         }   else {
diff --git a/app/Models/Articles/ArticlesModel.php b/app/Models/Articles/ArticlesModel.php
new file mode 100644
index 0000000..4d8c8f3
--- /dev/null
+++ b/app/Models/Articles/ArticlesModel.php
@@ -0,0 +1,184 @@
+<?php
+namespace App\Models\Articles;
+
+class ArticlesModel extends ArticlesManager
+{
+
+    protected int $id;
+    protected string $title;
+    protected string $slug;
+    protected string $content;
+    protected string $caption;
+    protected int $author_id;
+    protected $created_at;
+    protected $updated_at;
+    protected $image;
+
+    public function __construct()
+    {
+        $this->table = 'articles';
+    }
+
+    /**
+     * Get the value of id
+     */
+    public function getId(): int
+    {
+        return $this->id;
+    }
+
+    /**
+     * Set the value of id
+     */
+    public function setId($id): self
+    {
+        $this->id = $id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of title
+     */
+    public function getTitle(): string
+    {
+        return $this->title;
+    }
+
+    /**
+     * Set the value of title
+     */
+    public function setTitle($title): self
+    {
+        $this->title = $title;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of slug
+     */
+    public function getSlug(): string
+    {
+        return $this->slug;
+    }
+
+    /**
+     * Set the value of slug
+     */
+    public function setSlug($slug): self
+    {
+        $this->slug = $slug;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of content
+     */
+    public function getContent(): string
+    {
+        return $this->content;
+    }
+
+    /**
+     * Set the value of content
+     */
+    public function setContent($content): self
+    {
+        $this->content = $content;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of caption
+     */
+    public function getCaption(): string
+    {
+        return $this->caption;
+    }
+
+    /**
+     * Set the value of caption
+     */
+    public function setCaption($caption): self
+    {
+        $this->caption = $caption;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of author_id
+     */
+    public function getAuthor_id(): int
+    {
+        return $this->author_id;
+    }
+
+    /**
+     * Set the value of author_id
+     */
+    public function setAuthor_id($author_id): self
+    {
+        $this->author_id = $author_id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of created_at
+     */
+    public function getCreated_at(): string
+    {
+        return $this->created_at;
+    }
+
+    /**
+     * Set the value of created_at
+     */
+    public function setCreated_at($created_at): self
+    {
+        $this->created_at = $created_at;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of updated_at
+     */
+    public function getUpdated_at():? string
+    {
+        return $this->updated_at;
+    }
+
+    /**
+     * Set the value of updated_at
+     */
+    public function setUpdated_at($updated_at):? self
+    {
+        $this->updated_at = $updated_at;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of image
+     */
+    public function getImage():? string
+    {
+        return $this->image;
+    }
+
+    /**
+     * Set the value of image
+     */
+    public function setImage($image):? self
+    {
+        $this->image = $image;
+
+        return $this;
+    }
+    
+}
diff --git a/app/Models/Comments/CommentsManager.php b/app/Models/Comments/CommentsManager.php
new file mode 100644
index 0000000..19c9659
--- /dev/null
+++ b/app/Models/Comments/CommentsManager.php
@@ -0,0 +1,128 @@
+<?php
+namespace App\Models\Comments;
+
+use App\Models\Articles\ArticlesModel;
+use App\Models\GlobalManager;
+use App\Models\Users\UsersModel;
+
+class CommentsManager extends GlobalManager
+{
+
+    public function countAllInvalid()
+    {
+        return $this->request("SELECT COUNT(*) as nb_comments_invalid FROM comments WHERE validate = 0")->fetch();
+    }
+
+    public function findAllInvalid(int $limit, int $perPage)
+    {
+        // Query
+        $sql = "SELECT 
+                    A.id as id,
+                    A.author_id as author_id,
+                    A.content as content,
+                    A.validate as validate,
+                    A.article_id as article_id,
+                    A.created_at as created_at,
+                    B.firstname as authorFirstname,
+                    B.lastname as authorLastname,
+                    C.slug as articleSlug
+                FROM comments as A
+                INNER JOIN users as B on A.author_id = B.id
+                INNER JOIN articles as C on A.article_id = C.id
+                WHERE validate = 0
+                ORDER BY created_at ASC
+                LIMIT $limit, $perPage";
+
+        // Execute request
+        $results = $this->request($sql)->fetchAll();
+
+        // Transforms data
+        $data = array();
+        foreach ($results as $result) {
+            $item = array();
+            $commentsModel = new CommentsModel;
+            $commentsModel->setId($result->id)
+                            ->setAuthor_id($result->author_id)
+                            ->setContent($result->content)
+                            ->setValidate($result->validate)
+                            ->setArticle_id($result->article_id)
+                            ->setCreated_at($result->created_at);
+            $usersModel = new UsersModel;
+            $usersModel->setId($result->author_id)
+                       ->setLastname($result->authorLastname)
+                       ->setFirstname($result->authorFirstname);
+
+            $articlesModel = new ArticlesModel;
+            $articlesModel->setSlug($result->articleSlug);
+
+            array_push($item, $commentsModel, $usersModel, $articlesModel);
+            array_push($data, $item);
+        }
+
+        // Return data
+        return $data;
+    }
+
+    public function countAllValidFromArticle(int $id)
+    {
+        return $this->request("SELECT COUNT(*) as nb_comments FROM comments WHERE article_id = :id AND validate = 1", ['id' => $id])->fetch();
+    }
+
+    public function findAllValid($id, int $limit, int $perPage)
+    {
+        // Query
+        $sql = "SELECT 
+                    A.id as id,
+                    A.author_id as author_id,
+                    A.content as content,
+                    A.created_at as created_at,
+                    B.id as author_id,
+                    B.lastname as author_lastname,
+                    B.firstname as author_firstname,
+                    C.id as admin_id,
+                    C.lastname as admin_lastname,
+                    C.firstname as admin_firstname
+                FROM comments as A
+                INNER JOIN users as B on A.author_id = B.id
+                INNER JOIN users as C on A.validate_by = C.id
+                WHERE article_id = :id AND A.validate = 1 
+                ORDER BY created_at DESC
+                LIMIT $limit, $perPage";
+
+        // Execute Request
+        $results = $this->request($sql, ['id' => $id])->fetchAll();
+        
+        if (empty($results)) {
+            return false;
+        }
+
+        // Transforms data
+        $data = array();
+        foreach ($results as $result) {
+            $item = array();
+            $articlesModel = new CommentsModel;
+            $articlesModel->setId($result->id)
+                          ->setAuthor_id($result->author_id)
+                          ->setContent($result->content)
+                          ->setCreated_at($result->created_at);
+            $usersModel = new UsersModel;
+            $usersModel->setId($result->author_id)
+                       ->setLastname($result->author_lastname)
+                       ->setFirstname($result->author_firstname);
+
+            array_push($item, $articlesModel, $usersModel);
+            array_push($data, $item);
+        }
+
+        // Return data
+        return $data;
+    }
+
+    public function validComment($comment_id, $admin_id) 
+    {
+        $sql = "UPDATE comments SET validate = 1, validate_by = :admin_id WHERE id = :comment_id";
+
+        return $this->request($sql, ['admin_id' => $admin_id, 'comment_id' => $comment_id]);
+    }
+
+}
\ No newline at end of file
diff --git a/app/Models/Comments/CommentsModel.php b/app/Models/Comments/CommentsModel.php
new file mode 100644
index 0000000..8216d99
--- /dev/null
+++ b/app/Models/Comments/CommentsModel.php
@@ -0,0 +1,160 @@
+<?php
+namespace App\Models\Comments;
+
+class CommentsModel extends CommentsManager
+{
+
+    protected int $id;
+    protected int $author_id;
+    protected string $content;
+    protected int $validate;
+    protected int $validate_by;
+    protected int $article_id;
+    protected $created_at;
+
+    public function __construct()
+    {
+        $this->table = 'comments';
+    }
+
+    /**
+     * Get the value of id
+     */ 
+    public function getId()
+    {
+        return $this->id;
+    }
+
+    /**
+     * Set the value of id
+     *
+     * @return  self
+     */ 
+    public function setId($id)
+    {
+        $this->id = $id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of author_id
+     */ 
+    public function getAuthor_id()
+    {
+        return $this->author_id;
+    }
+
+    /**
+     * Set the value of author_id
+     *
+     * @return  self
+     */ 
+    public function setAuthor_id($author_id)
+    {
+        $this->author_id = $author_id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of content
+     */ 
+    public function getContent()
+    {
+        return $this->content;
+    }
+
+    /**
+     * Set the value of content
+     *
+     * @return  self
+     */ 
+    public function setContent($content)
+    {
+        $this->content = $content;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of validate
+     */ 
+    public function getValidate()
+    {
+        return $this->validate;
+    }
+
+    /**
+     * Set the value of validate
+     *
+     * @return  self
+     */ 
+    public function setValidate($validate)
+    {
+        $this->validate = $validate;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of validate_by
+     */ 
+    public function getValidate_by()
+    {
+        return $this->validate_by;
+    }
+
+    /**
+     * Set the value of validate_by
+     *
+     * @return  self
+     */ 
+    public function setValidate_by($validate_by)
+    {
+        $this->validate_by = $validate_by;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of article_id
+     */ 
+    public function getArticle_id()
+    {
+        return $this->article_id;
+    }
+
+    /**
+     * Set the value of article_id
+     *
+     * @return  self
+     */ 
+    public function setArticle_id($article_id)
+    {
+        $this->article_id = $article_id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of created_at
+     */ 
+    public function getCreated_at()
+    {
+        return $this->created_at;
+    }
+
+    /**
+     * Set the value of created_at
+     *
+     * @return  self
+     */ 
+    public function setCreated_at($created_at)
+    {
+        $this->created_at = $created_at;
+
+        return $this;
+    }
+    
+}
\ No newline at end of file
diff --git a/app/Models/Users/UsersModel.php b/app/Models/Users/UsersModel.php
new file mode 100644
index 0000000..9cf3cd3
--- /dev/null
+++ b/app/Models/Users/UsersModel.php
@@ -0,0 +1,159 @@
+<?php
+namespace App\Models\Users;
+
+class UsersModel extends UsersManager
+{
+
+    protected int $id;
+    protected string $lastname;
+    protected string $firstname;
+    protected string $email;
+    protected string $password;
+    protected int $admin;
+    protected $created_at;
+
+    public function __construct()
+    {
+        $this->table = 'users';
+    }
+
+    /**
+     * Get the value of id
+     */
+    public function getId()
+    {
+        return $this->id;
+    }
+
+    /**
+     * Set the value of id
+     *
+     * @return  self
+     */
+    public function setId($id)
+    {
+        $this->id = $id;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of lastname
+     */
+    public function getLastname()
+    {
+        return $this->lastname;
+    }
+
+    /**
+     * Set the value of lastname
+     *
+     * @return  self
+     */
+    public function setLastname($lastname)
+    {
+        $this->lastname = $lastname;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of firstname
+     */
+    public function getFirstname()
+    {
+        return $this->firstname;
+    }
+
+    /**
+     * Set the value of firstname
+     *
+     * @return  self
+     */
+    public function setFirstname($firstname)
+    {
+        $this->firstname = $firstname;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of email
+     */
+    public function getEmail()
+    {
+        return $this->email;
+    }
+
+    /**
+     * Set the value of email
+     *
+     * @return  self
+     */
+    public function setEmail($email)
+    {
+        $this->email = $email;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of password
+     */
+    public function getPassword()
+    {
+        return $this->password;
+    }
+
+    /**
+     * Set the value of password
+     *
+     * @return  self
+     */
+    public function setPassword($password)
+    {
+        $this->password = $password;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of admin
+     */
+    public function getAdmin()
+    {
+        return $this->admin;
+    }
+
+    /**
+     * Set the value of admin
+     *
+     * @return  self
+     */
+    public function setAdmin($admin)
+    {
+        $this->admin = $admin;
+
+        return $this;
+    }
+
+    /**
+     * Get the value of created_at
+     */
+    public function getCreated_at()
+    {
+        return $this->created_at;
+    }
+
+    /**
+     * Set the value of created_at
+     *
+     * @return  self
+     */
+    public function setCreated_at($created_at)
+    {
+        $this->created_at = $created_at;
+
+        return $this;
+    }
+}
diff --git a/app/Models/UsersManager.php b/app/Models/UsersManager.php
deleted file mode 100644
index 6f36b5d..0000000
--- a/app/Models/UsersManager.php
+++ /dev/null
@@ -1,158 +0,0 @@
-<?php
-namespace App\Models;
-
-use App\Core\Database;
-use PDOStatement;
-
-class UsersManager extends Database
-{
-
-    public function countAll()
-    {
-        return $this->request("SELECT COUNT(*) as nb_users FROM users WHERE admin = 0")->fetch();
-    }
-
-    public function findAll(int $limit, int $perPage)
-    {
-        // Query
-        $sql = "SELECT *
-                FROM users as A
-                WHERE admin = 0
-                ORDER BY created_at ASC
-                LIMIT $limit, $perPage";
-
-        // Execute request
-        $results = $this->request($sql)->fetchAll();
-
-        // Transforms data
-        $data = array();
-        foreach ($results as $result) {
-            $usersModel = new UsersModel();
-            $usersModel->setId($result->id)
-                       ->setEmail($result->email)
-                       ->setFirstname($result->firstname)
-                       ->setLastname($result->lastname)
-                       ->setCreated_at($result->created_at);
-            array_push($data, $usersModel);
-        }
-
-        // Return data
-        return $data;
-    }
-
-    public function findBy(string $params, string $value) : UsersModel | null
-    {
-        $user = null;
-
-        // Query 
-        $sql = "SELECT * FROM users WHERE $params = :value";
-
-        // Execute request
-        $result = $this->request($sql, ['value' => $value])->fetch();
-
-        // Check result and create UsersModel
-        if ($result) {
-            $user = new UsersModel;
-            $user->setId($result->id)
-                 ->setEmail($result->email)
-                 ->setPassword($result->password)
-                 ->setFirstname($result->firstname)
-                 ->setLastname($result->lastname)
-                 ->setAdmin($result->admin)
-                 ->setCreated_at($result->created_at);
-        }
-
-        // Return $user
-        return $user;
-    }
-
-    public function find(int $id): PDOStatement | false
-    {
-        // Query 
-        $sql = "SELECT * FROM users WHERE id = :id";
-
-        // Execute request
-        return $this->request($sql, ['id' => $id])->fetch();
-    }
-
-    public function findAllAdmin()
-    {
-        return $this->request("SELECT * FROM users WHERE admin = 1")->fetchAll();
-    }
-
-    public function checkExists(string $params, string $value): bool
-    {
-        // Query
-        $sql = "SELECT * FROM users WHERE $params = :value";
-
-        // Execute request
-        $result = $this->request($sql, ['value' => $value])->fetch();
-
-        // Check result and return bool
-        if ($result) {
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    public function create(): PDOStatement | false
-    {
-        $keys = [];
-        $inter = [];
-        $values = [];
-
-        // Loop to get parameters and values and add inter("?")
-        foreach ($this as $key => $value) {
-            if ($value !== null && $key != 'db' && $key != 'table') {
-                $keys[] = $key;
-                $inter[] = "?";
-                $values[] = $value;
-            }
-        }
-
-        // Transforms array into a string
-        $list_keys = implode(', ', $keys);
-        $list_inter = implode(', ', $inter);
-
-        // Execute request
-        return $this->request('INSERT INTO users (' . $list_keys . ')VALUES(' . $list_inter . ')', $values);
-    }
-
-    public function delete(int $id): PDOStatement | false 
-    {
-        return $this->request("DELETE FROM users WHERE id = ?", [$id]);
-    }
-
-    public function hydrate($data): self
-    {
-        foreach ($data as $key => $value) {
-            // Retrieves setter corresponding to key
-            $setter = 'set' . ucfirst($key);
-            // Check if setter exists
-            if (method_exists($this, $setter)) {
-                // Call setter
-                $this->$setter($value);
-            }
-        }
-        return $this;
-    }
-
-    public function request(string $sql, array $params = null): PDOStatement|false
-    {
-        // Get instance of Database
-        $this->db = Database::getInstance();
-
-        // Check if there are any parameters
-        if ($params !== null) {
-            // Prepared request
-            $query = $this->db->prepare($sql);
-            $query->execute($params);
-            return $query;
-        } else {
-            // Simple request
-            return $this->db->query($sql);
-        }
-    }
-    
-}
\ No newline at end of file
diff --git a/app/Views/pages/articles/index.html.twig b/app/Views/pages/articles/index.html.twig
index c544b7c..3883374 100644
--- a/app/Views/pages/articles/index.html.twig
+++ b/app/Views/pages/articles/index.html.twig
@@ -46,6 +46,10 @@
                       <a href="/articles?p={{ nextPage }}" class="page-link">Suivant</a>
                     </li>
                   {% endif %}
+<<<<<<< HEAD
+=======
+
+>>>>>>> Optimization
                 </ul>
               </nav>
         </div>
diff --git a/app/Views/pages/articles/show.html.twig b/app/Views/pages/articles/show.html.twig
index 82cb60e..91d61f1 100644
--- a/app/Views/pages/articles/show.html.twig
+++ b/app/Views/pages/articles/show.html.twig
@@ -63,6 +63,23 @@
                                 {% endif %}
                             </div>           
                         {% endfor %}
+                        <nav>
+                            <ul class="pagination">
+                              {% if currentPage != 1 %}
+                              <li class="page-item">
+                                {% set previousPage = currentPage - 1 %}
+                                <a href="/article/{{ article.getSlug() }}/{{ article.getId() }}?p={{ previousPage }}" class="page-link">Précédent</a>
+                              </li>    
+                              {% endif %}
+                              {% if lastPage != true %}
+                                <li class="page-item">
+                                  {% set nextPage = currentPage + 1 %}
+                                  <a href="/article/{{ article.getSlug() }}/{{ article.getId() }}?p={{ nextPage }}" class="page-link">Suivant</a>
+                                </li>
+                              {% endif %}
+            
+                            </ul>
+                          </nav>
                     {% endif %}
                     {% if checkAuth %}
                         <form id="comment-form" method="POST" action="/article/{{ article.getSlug() }}/{{ article.getId() }}/commentaire/enregistrement">
